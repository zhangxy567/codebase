#include <stdio.h>#include <stdlib.h>struct Node {    int data;    struct Node* next;};struct Graph {    int V;    struct Node** array;};struct Node* createNode(int data) {    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));    newNode->data = data;    newNode->next = NULL;    return newNode;}struct Graph* createGraph(int V) {    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));    graph->V = V;    graph->array = (struct Node**)malloc(V * sizeof(struct Node*));    for (int i = 0; i < V; ++i)        graph->array[i] = NULL;    return graph;}void addEdge(struct Graph* graph, int src, int dest) {    struct Node* newNode = createNode(dest);    newNode->next = graph->array[src];    graph->array[src] = newNode;}void topologicalSortUtil(struct Graph* graph, int v, int visited[], struct Node** stack, int* stackIndex) {    visited[v] = 1;    struct Node* temp = graph->array[v];    while (temp != NULL) {        if (!visited[temp->data])            topologicalSortUtil(graph, temp->data, visited, stack, stackIndex);        temp = temp->next;    }    stack[*stackIndex] = createNode(v);    (*stackIndex)++;}void topologicalSort(struct Graph* graph) {    int V = graph->V;    int visited[V];    struct Node** stack = (struct Node**)malloc(V * sizeof(struct Node*));    int stackIndex = 0;    for (int i = 0; i < V; ++i)        visited[i] = 0;    for (int i = 0; i < V; ++i) {        if (!visited[i])            topologicalSortUtil(graph, i, visited, stack, &stackIndex);    }    printf("Topological Sort:\n");    while (stackIndex > 0) {        stackIndex--;        printf("%d ", stack[stackIndex]->data);        free(stack[stackIndex]);    }    free(stack);}int main() {    int V = 6;    struct Graph* graph = createGraph(V);    addEdge(graph, 5, 2);    addEdge(graph, 5, 0);    addEdge(graph, 4, 0);    addEdge(graph, 4, 1);    addEdge(graph, 2, 3);    addEdge(graph, 3, 1);    topologicalSort(graph);    return 0;}