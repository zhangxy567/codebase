#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <time.h>


#include <iostream>
using namespace std;
//array 数组 就是一组数据的意思
// 数组概念:数组是一组相同类型元素的集合
// 一维数组:
//一维数组创建的语法形式:
// type arr_name[常量值]
// 存放在数组里面的值被称为数组的元素,数组在创建的时候可以指定数组的大小和元素类型
// type:指数组里面存放数据的类型,可以是char short int float等,也可以是**自定义类型**
// arr_name指的是数组的名字,这个名字根据实际情况,取得有意义就行
// []中的常量值用来指定数组大小,但是注意只能放常量值,不能放变量
// 
// 数组的初始化,初始化一般使用大括号,将数据放在大括号中;
// 1完全初始化
// 2不完全初始化    按照次序初始化,剩下没有初始化的默认全部放0
// 3初始化的项数不能比常量值大
// 4初始化不加数组大小,则数组大小由后面的数据个数决定
// 
// 数组的类型:
// 数组的类型不是数组元素的类型而是整个集合的类型:
// 比如 int array[10]的数组类型   不是int 而是 int[10]  //和变量一样,去掉名字就是数组类型
// 
// 一维数组的使用:
// 1数组下标:C语言规定数组有下表,从0开始,假设数组有n个元素,那么最后一个元素的下表就是n-1,下表类似于编号
// C语言对于数组的访问提供了操作符[],这个操作符叫做   下标引用操作,有了这个符号可以访问元素,想访问下表为几,就把下表带入即可
// 用scanf输入时,对于元素arr[10]需要取地址
// 
// 一维数组在内存中的存储:
// 由一维数组的内存地址是连续的,可知数组在内存中是连续存储的
// (
// %p:是专门用来打印16进制地址的,同时前面的两个零不会省略
// %x:小写打印十六进制数,且会省略前面的0
// %X:大写打印十六进制数,且会省略前面的0
// %#x:小写打印十六进制数,且会省略前面的0,但是以0x打头,提醒为十六进制
// %X:大写打印十六进制数,且会省略前面的0,但是以0X打头,提醒为十六进制数
// )
// 
// 
// 
// sizeof计算数组元素个数:
// (1)sizeof的返会类型是size_t 得用%zd来打印
// (2)sizeof的返回类型本质上还是字节个数
// (3)sizeof(数组名)计算的是整个数组的大小,单位是字节
//
// strlen:求字符串长度,只能针对字符串,而且求得是字符串长度,而不是数组的完全长度
// 
// 
// 
// 
// 二维数组:
// 一维数组的每个元素都是内置的,当我们把一维数组作为数组元素时,就得到了二维数组
// ⼆维数组作为数组元素的数组被称为三维数组，⼆维数组以上的数组统称为多维数组。
// 二维数组的创建:
// 语法       type arr_name[常量值1][常量值2]
// 例子: int arr[3][5]
//       char data[2][8]
// (1)常量1表示行,常量2表示列
// (2)type表示数组每个元素的类型
// (3)arr_name表示数组名,也就是标识符,用户自定义,遵守标识符的定义方法
// 
// 二维数组的初始化:
// (1)不完全初始化,只有一个大括号,大括号放的数据按照行序以此填满,没有元素初始化的位置默认初始化为0
// (2)行不完全初始化,在大括号里面再加大括号,当成元素一样用,隔开,在最内层大括号里进行每行的初始化(第n的内层大括号对于第几层)
// 最后一行可以不加大括号
// (3)只能使用大括号,小括号在数组初始化时的作用是逗号表达式
// (4)二维数组初始化时,可以省略行(常量1),不能省略列(常量2)
// 
// 二维数组的使用:
// (1)C语言规定,二维数组也有行和列之分,规定行从0开始,规定列也从0开始,
// (2)那么也就是说如定义arr[n][m],则行下标n-1则是最后一行,m-1则是最后一列,arr[n-1][m-1]是能访问的最后一个元素
// 
// 二维数组在内存中的存储:
// 二维数组在内存中也是连续存储的,一行存完,就接着存下一行
// 
// 思考:二维数组之所以叫做是一维数组的数组,就是在于相当每一行都是一个  一维数组  数组名是arr[i] 然后再在其后加一个[j]
// 就相当于一维数组对于数组名采用下标访问一样
// 
// 
// C99变长数组:    (C99中给⼀个变⻓数组（variable-length array，简称 VLA）的新特性),但是很遗憾,vs2022不支持
// 在C99之前,数组的创建只能使用常量值,或者常量表达式或者省略来创建
// 在C99中,容许通过变量来创建数组大小
//注意两点:
// (1)变长数组只是说可以使用表变量来指定数组大小
// (2)并不是说数组的大小是变化的
// (3)一旦数组创建,数组大小也就不可以变化了
// (4)使用变长数组不可初始化数组值,只能赋值
// (5)想要学习动态数组长度变化就要学习更高级的malloc了
// 
// 
// 
// 
// 
//
int main()
{
	////int score[5]={ 1,2,3,4,5 };
	//char score[5]={ 1,2,3,4,5 };
	////for(int i=0;i<=4;i++)
	////printf("%d",score[i]);
	////for (int i = 0; i <= 4; i++)
	////	printf("%p\n", &score);
	//for (int i = 0; i <= 4; i++)
	//	printf("%x\n", &score[i]);


	//int arr1[3][5] = { {1,2,3},{4,5},{6,7} };
	//int i = 0;
	//for (int i = 0; i <= 2; i++)
	//{
	//	int j = 0;
	//	for (int j = 0; j <= 4; j++)
	//	{
	//		printf("%#x\n", &arr1[i][j]);
	//	}
	//}

	return 0;
}