variable.txt


布尔类型使用必须包含头文件  <stdbool.h>
布尔类型变量取值只有两种 true or false
布尔类型在cpp中可以直接使用 ,但是使用形式只能是 bool
布尔类型在c语言中使用则需要包含头文件了<stdbool.h> 但是可以使用
_Bool 和bool两种形式命名变量

布尔类型false 默认值是0
        true 默认值是1



******************


sizeof 专门用来计算 sizeof操作数<类型>的长度
sizeof 的操作数可以是 类型 ,变量 ,表达式
返回结果单位是字节;

sizeof 计算结果是size_t类型 ,C语言只规定是无符号整数
也就是可能为 unsigned int,unsigned long,unsigned long long,
具体未规定,且上面分别对应  %u ,%lu ,%llu
为了解决这个问题,C语言规定其为size_t类型,可能是上面三种之一
所以打印是使用 %zd为无符号整数打印


sizeof 的操作数如果不是数据类型,而是变量和表达式,可以省略圆括号
int a1 = sizeof(int);//这种可以
int a2 = sizeof int;//这种运行会报错



sizeof后面的表达式不参与真运算 ,而是根据表达式类型得出变量/类型<长度>结果
int a3 = sizeof(b++);
int a4 = sizeof b;



char 默认是signed char 还是unsigned char C语言未规定
取决于编译器,所以想表示 signed/unsigned 必须自己手动添加
/*unsigned char a2=97;
unsigned char b=253;
printf("%c", a2);*/

打印格式对应关系:
%d   对应 int
%u   对应 unsigned [int]
%lu  对应 unsigned long [int]
%llu 对应 unsigned longlong [int]


查看当前系统下数据类型的极限
两个文件
<limits.h>
<float.h>

/*printf("%d", INT_MAX);
return 0;*/




1.变量名的使用必须有意义
2.变量的组成只能是字母,数字,下划线***且不能是数字开头
3.变量名字不能和关键字冲突



全局变量范围>局部变量
全局变量和局部变量<名>相同,局部变量优先
全局变量在内存静态区
局部变量在栈区



单精度浮点型用%f打印
双精度浮点型用%lf打印


C语言除法和现实中的区别:
如果除数两端为整数,则执行整数除法,
只取商,不留余数,结果整数
如果要计算出小数的效果,除号两端
至少要一个小数,全是小数也可以




%f 和 %lf 打印小数默认打印六位小数
通过在占位符的%后面添加内容修改打印形式
如:
% .1 f 这样的书写使得结果只有一位小数
还有其他各种形式,在 printf和scanf篇会细讲


编译器上写的小数默认是double类型,需要标注,
形式如右: 3.14f


% 取模运算符 只能用于<整数>运算 返回结果为两整数的余数
例:  5%2=1


取模的结果正负由左操作数决定


赋值语句从右向左运行
赋值语句的结果为左值
<连续>赋值语句从右向左运行



<复合>赋值符
C语言中 如果左操作数 在右操作区间有左操作数的操作
则在可以使用复合操作符;

例子:
	a=a+3 ;  也可写作  a+=3  +=即是复合操作符
除了加减乘除模,还有<位>操作符也可以进行复合:>>= <<= ^= |= &=



前置++和后置++的联系与区别
联系:
前置++和后置++都是自增1
int a = 10;
a++;
++a;
前置++和后置++区别在于
前置++: 先++再使用 ,   后置++: 先使用再++
前置--和后置--的用法与上前置++与后置++用法完全相同


